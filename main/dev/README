This is a sample application that serves as a basis for web based Globant
projects. It aims to be a solid framework to start working on, provide samples
of best practices and incorporate some ready to use components.

To start using this application, you need:

1- mysql version 5.0 or newer. You will a mysql database with an account with
full access to it.

2- jdk-1.5.0 or newer. The katari sample application was never tested on 1.6.

3- maven-2.2.

Katari needs at least 512Mb of memory to run, depending on platform. To be on
the safe side you could set an environment variable:

MAVEN_OPTS="-XX:MaxPermSize=192m -Xmx768m"

before running any maven command.

4- A properly configured maven repository proxy or access to the public maven
repositories.

Quick start guide
-----------------

Create a mysql database. Register its url, user and password in
~/.m2/settings.xml (~ represents your home directory). You can find a sample
settings.xml in the src/main/config directory.

These are the commands to run from the mysql console:

  create database katari;
  grant all privileges on katari.* to katari@localhost identified by 'katari';
  use katari;

  create table katari_marker_666(drop_database varchar (50));
  insert into katari_marker_666 values ('YES, DROP ME');

At the top level project (the parent of the directory that contains this README
file), run:

  mvn install

Then in dev/katari-sample/ run:

  mvn jetty:run

This will start a jetty embedded container listening on port 8098. Point your
browser to http://localhost:8098/katari-sample to access the application. You
should now be able to login with username admin and password admin.

Note: if you previously ran

  mvn war:inplace

jetty will probably not start. Remove all the files generated by war:inplace
(src/main/webapp/WEB-INF/classes and src/main/webapp/WEB-INF/lib) and try again.

Quick start guide for postgres
------------------------------

Create a postgres database using psql.

  create database katari;
  create user katari with password 'katari';
  grant all privileges on database katari to katari;
  \c katari katari localhost
  (at prompt, enter 'password' as the requested password).

Then run the following sql statements:

  create table katari_marker_666(drop_database varchar (50));
  insert into katari_marker_666 values ('YES, DROP ME');

The rest is the same as with mysql.

Working inside Globant network
------------------------------

All outgoing connections from Globant must go through a proxy. To get over this,
Globant has an internal maven repository. You need to configure the mirror to
point to the this repository. Add this as a child of <settings> in
~/.m2/settings.xml:

  <mirrors>
    <mirror>
      <id>nexus</id>
      <url>http://maven.corp.globant.com/nexus/content/groups/public</url>
      <mirrorOf>*,!sonar</mirrorOf>
    </mirror>
  </mirrors>

Also, you need access to a tomcat distribution to run the functional tests:

  <properties>
    <cargo.tomcatLocation>
      http://maven.corp.globant.com/tools/containers/apache-tomcat-5.5.17.zip
    </cargo.tomcatLocation>
  </properties>

Supported software
------------------

This application was developed with tomcat 5.5.20, mysql 5.0.24, jdk-1.5.0_08.
You must set JAVA_HOME environment variable to the Java (JDK 1.5) installation
directory.

Starting the application
------------------------

There are different ways to start the application, but first you must follow
the MySql instructions in order to set up the database that will be used.
After that is done, you can simply start the application by following the quick
start guide or deploying it on Tomcat as is explained later.

MySql instructions
------------------

If you have just installed MySql you will have to create a new database:
First connect to the MySql server and then execute:

  create <your_database_name>;
  use <your_database_name>;

Then, you have to create a reference table that indicates the application it
has control over the database. All the other tables in the database
(if you have any) will be erased when the application starts.

Execute the following:

  create table katari_marker_666(drop_database varchar (50));
  insert into katari_marker_666 values ('YES, DROP ME');

Then you have to modify (or create) ~/.m2/settings.xml to register the
following:

  url: jdbc:mysql://localhost/<your_database_name>
  username: your_user
  password: your_password

It is recomended that create another user that has full permission on the test
database. Avoid the use of root.

Deploying in tomcat
-------------------

To deploy this application under tomcat, you must:

1- Build the war file: mvn package.
  (This will be created inside /katari-sample/target)

2- Copy the war to <TOMCAT_HOME>/webapps

3- Create a file in <TOMCAT_HOME>/common/classes named katari.properties. This
file contains the database credentials. You can use
katari-sample/src/test/resources/katari.properties as a sample.

4- Create a file in <TOMCAT_HOME>/common/classes named log4j.properties to
configure the log. You can use katari-sample/src/test/resources/log4j.properties
as a sample.

The URL of the application will depend on how tomcat is configured, by default:
http://localhost:8080/katari-sample/

If you want to deploy the application in place in tomcat, instead of copying the
war to webapps (step number 2), create a file named katari-i.xml in
conf/Catalina/localhost. You can use katari-sample/src/config/katari-i.xml as a
sample.

Running in tomcat
-----------------

You can also run the application in tomcat. The easiest way to do this is
through maven:

  mvn -P cargo-inplace war:inplace cargo:start

This must be run in katari-sample directory.

Note: you have to activate the cargo-inplace profile to start tomcat with cargo.

Eclipse instructions
--------------------

To use Eclipse to develop the application, first you must generate the eclipse
project files from your maven POM (Project Object Model). You will have an
eclipse project for each module of the application. So you will have a project
for katari-sample-module and another one for katari-sample. You can do this by
executing the following inside both directories.

  mvn eclipse:eclipse -DdownloadSources=true -DdownloadJavadocs=true

You also must execute this (once), this adds the classpath variable M2_REPO
pointing to your maven jar repository.

  mvn eclipse:add-maven-repo -Declipse.workspace=<path_to_ecplise_workspace>

Finally from eclipse, you must go to File->import and select "Existing Projects
into Workspace", there you must select one of the modules to add it, after this,
repeat this step with the other module.

Debugging the application from eclipse
--------------------------------------

Before deploying in tomcat you must do:

1- Edit <TOMCAT_HOME>/bin/startup.bat and add these lines

  SET JPDA_TRANSPORT=dt_socket
  SET JPDA_ADDRESS=8000

Then, in the same file, change this

  call "%EXECUTABLE%" start %CMD_LINE_ARGS%

to this

  call "%EXECUTABLE%" jpda start %CMD_LINE_ARGS%

2- In Eclipse, go to:

  Run -> Debug... -> 'Remote Java Application' -> New.

Here you have to select the project you want to debug, and complete:

  .Host:localhost
  .Port:8000

From this point forward, to debug the application,you can start the application
as you always do, deployed on tomcat or by mvn cargo:start, and from eclipse run
the app in debug mode.

Debugging with maven and jetty
------------------------------

You can also remotely debug the application deployed in jetty by maven. Define a
shell variable MAVEN_OPTS, like this:

MAVEN_OPTS="-Xdebug -Xnoagent -Djava.compiler=NONE -Xrunjdwp:transport=dt_socket,address=8000,server=y,suspend=n"

Then, launch jetty:

mvn jetty:run

Connect to the remote debuging port, 8000 in this case.

If you are behind  a proxy
--------------------------

If you are behind a proxy and the server needs to make http requests to external
resources, then define MAVEN_OPTS as:

MAVEN_OPTS="-Dhttp.proxyHost=localhost -Dhttp.proxyPort=3128"

Memory usage
------------

Building the full maven project, including site and deployment under maven 2.2.1
consumes a lot of memory. Under linux, use this to make sure that java memory is
enough:

MAVEN_OPTS="-XX:MaxPermSize=384m -Xmx1512m"

-- vim: set ts=2 et sw=2 tw=80:


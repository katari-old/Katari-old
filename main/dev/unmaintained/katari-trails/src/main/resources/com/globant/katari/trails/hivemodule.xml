<?xml version="1.0"?>
<module id="trails" version="1.0.0">

  <implementation service-id="trails.core.DescriptorService">
    <invoke-factory service-id="hivemind.lib.SpringLookupFactory">
      <lookup-bean name="descriptorService"/>
    </invoke-factory>
  </implementation>

  <implementation service-id="trails.core.PersistenceService">
    <invoke-factory service-id="hivemind.lib.SpringLookupFactory">
      <lookup-bean name="persistenceService"/>
    </invoke-factory>
  </implementation>

  <implementation service-id="trails.hibernate.PersistenceService">
    <invoke-factory service-id="hivemind.lib.SpringLookupFactory">
      <lookup-bean name="persistenceService"/>
    </invoke-factory>
  </implementation>

  <implementation service-id="trails.core.EditorService">
    <invoke-factory service-id="hivemind.lib.SpringLookupFactory">
      <lookup-bean name="editorService"/>
    </invoke-factory>
  </implementation>

  <implementation service-id="trails.core.ViewerService">
    <invoke-factory service-id="hivemind.lib.SpringLookupFactory">
      <lookup-bean name="viewerService"/>
    </invoke-factory>
  </implementation>

  <!-- This object cannot be instantiated !!!! CurrentUserFactory does not exist.
  TODO See how this affects security.
  -->
  <service-point id="currentUserFactory"
    interface="org.apache.tapestry.engine.state.StateObjectFactory">
    <invoke-factory>
      <construct
          class="com.globant.katari.sample.crud.security.CurrentUserFactory">
        <set-object property="webRequest"
          value="service:tapestry.globals.WebRequest"/>
        <set-object property="userDao" value="spring:trailsUserDAO"/>
      </construct>
    </invoke-factory>
  </service-point>

  <implementation service-id="trails.core.MessageSource">
    <invoke-factory service-id="hivemind.lib.SpringLookupFactory">
      <lookup-bean name="trailsMessageSource"/>
    </invoke-factory>
  </implementation>

  <contribution configuration-id="tapestry.url.ServiceEncoders">
    <page-service-encoder id="page" extension="page" service="page"/>
    <page-service-encoder id="external" extension="ext" service="external"/>
    <direct-service-encoder id="direct" stateless-extension="direct"
      stateful-extension="sdirect"/>
    <asset-encoder id="asset" path="/assets"/>
    <encoder id="trails" before="extension"
      object="service:trails.core.PagesEncoder"/>
    <extension-encoder id="extension" extension="svc" after="*"/>
  </contribution>

  <contribution configuration-id="tapestry.persist.PersistenceStrategy">
    <strategy name="trails-entity"
      object="service:trails.hibernate.ReloadReattachPropertyPersistenceStrategy"/>
  </contribution>

  <contribution configuration-id="tapestry.state.ApplicationObjects">
    <state-object name="callbackStack" scope="session">
      <create-instance class="org.trails.callback.CallbackStack"/>
    </state-object>
    <state-object name="currentUser" scope="session">
      <invoke-factory object="service:currentUserFactory"/>
    </state-object>
  </contribution>

  <implementation service-id="trails.core.AddNewLinkRenderer">
    <invoke-factory>
      <construct class="org.apache.tapestry.contrib.link.ButtonLinkRenderer"/>
    </invoke-factory>
  </implementation>

  <implementation service-id="trails.core.BuilderDirector">
    <invoke-factory>
      <construct class="org.trails.builder.BuilderDirector"/>
    </invoke-factory>
  </implementation>

  <implementation service-id="trails.core.FilePersister">
    <invoke-factory>
      <construct class="org.trails.component.blob.DefaultFilePersister">
        <set-object property="persistenceService"
          value="service:trails.core.PersistenceService"/>
        <set-object property="descriptorService"
          value="service:trails.core.DescriptorService"/>
        <set-object property="blobDownloadService"
          value="service:trails.core.BlobService"/>
      </construct>
    </invoke-factory>
  </implementation>

  <implementation service-id="trails.core.IconResolver">
    <invoke-factory>
      <construct class="org.trails.component.blob.DefaultIconResolver">
        <set-object property="classpathAssetFactory"
          value="service:tapestry.asset.ClasspathAssetFactory"/>
      </construct>
    </invoke-factory>
  </implementation>

  <!-- Modules and Trails integration -->
  <!-- contribution configuration-id="tapestry.InfrastructureOverrides">
    <property name="exceptionPageName" value="Error"/>
  </contribution -->

  <!--
  <contribution configuration-id="tapestry.InfrastructureOverrides">
    <property name="exceptionPresenter"
      object="service:trails.core.ApplicationExceptionPresenter"/>
  </contribution>
  <contribution configuration-id="tapestry.InfrastructureOverrides">
    <property name="exceptionPageName" value="DefaultException"/>
  </contribution>
  -->

  <!-- Locates tapestry specifications (.pages) and components (jwc) in
  com.globant.katari.trails.pages and
  com.globant.katari.trails.pages, and in the application
  configuration named org.apache.tapestry.component-class-packages
  and org.apache.tapestry.page-class-packages. See trails.application. -->
  <implementation service-id="tapestry.page.SpecificationResolverDelegate">
    <invoke-factory>
      <construct class="com.globant.katari.trails.ModuleTemplateSourceDelegate">
        <set-object property="customPagesLocation"
          value="spring:trails.customPagesLocation"/>
        <set-object property="customComponentsLocation"
          value="spring:trails.customComponentsLocation"/>
      </construct>
    </invoke-factory>
  </implementation>

</module>

<!-- vim: set ts=2 et sw=2 ai: -->

